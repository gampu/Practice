/* C++ headers */
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<cstdlib>
#include<cassert>
#include<utility>

/* C headers */
#include<unistd.h>
#include<string.h>
#include<sys/time.h>
#include<fcntl.h>
#include<sys/utsname.h>
#include<sys/ioctl.h>
#include<sys/inotify.h>
#include<sys/types.h>
#include<sched.h>
#include<signal.h>
#include<pthread.h>
#include<dirent.h>
#include<aio.h>
#include<sys/socket.h>
#include<sys/un.h>

/* UNIX domain TCP server */

/* Environment pointer */
char** environ;

/* Error function */
void err( const char* str )
{
    std::cout << errno << "\n";
    perror( str );
}

const char *SOCKNAME = "/tmp/mysock\0";
#define BACKLOG 5
#define BUFSIZE 100
char buf[ BUFSIZE ];

int main( int argc, char* argv[] )
{
	/* Create a socket */
	int sfd = socket( AF_UNIX, SOCK_STREAM, 0 );
	if( sfd == -1 )
	{
		err( "sfd" );
		return 0;
	}

	/* Set struct sockaddr_un for bind */
	struct sockaddr_un addr;
	memset( &addr, 0, sizeof( struct sockaddr_un ) );
	addr.sun_family = AF_UNIX;
	strncpy( addr.sun_path, SOCKNAME, sizeof( addr.sun_path ) - 1 );

	/* Remove SOCKNAME if already exists */
	if( remove( SOCKNAME ) != 0 && errno != ENOENT )
	{
		err( "remove" );
		goto _error1;
	}

	/* Bind socket to SOCKNAME */
	if( bind( sfd, ( struct sockaddr* )&addr, sizeof( struct sockaddr_un ) ) != 0 )
	{
		err( "bind" );
		goto _error1;
	}

	/* Start listening on sfd */
	if( listen( sfd, BACKLOG ) == -1 )
	{
		err( "listen" );
		goto _error2;
	}

	/* Handle client connections iteratively.
	 * File descriptor for client socket
	 */
	int cfd;
	for( ;; )
	{
		/* Accept a new connection on a new socket */
		if( cfd = accept( sfd, NULL, NULL ) == -1 )
		{
			err( "cfd" );
			goto _error2;
		}

		/* Transfer data from client onto server's terminal */
		int bytes;
		while( ( bytes = read( cfd, buf, BUFSIZE ) ) > 0 )
		{
			if( write( STDOUT_FILENO, buf, bytes ) != bytes )
			{
				err( "write" );
				goto _error3;
			}
		}
		/* Error while reading from cfd */
		if( bytes == -1 )
		{
			err( "read" );
			goto _error3;
		}

		/* Close cfd */
		close( cfd );
	}

/* Release resources appropriately */
_error3:
	close( cfd );

_error2:
	remove( SOCKNAME );

_error1:
	close( sfd );
    return 0;
}
